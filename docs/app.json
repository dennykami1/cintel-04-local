[{"name": "app.py", "content": "from shiny import App, Inputs, Outputs, Session, ui, render, reactive\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport pandas as pd  # Import pandas here\nfrom shinywidgets import output_widget, render_widget\nimport shinyswatch\nfrom palmerpenguins import load_penguins \nimport seaborn as sns\nimport ipyleaflet as ipyl\n\n# Load the Palmer Penguins dataset\npenguins = load_penguins()  # Correctly load the dataset\n\n# Define a dictionary for display names mapped to column names\ncolumn_choices = {\n    \"Flipper Length (mm)\": \"flipper_length_mm\",\n    \"Body Mass (g)\": \"body_mass_g\",\n    \"Bill Length (mm)\": \"bill_length_mm\",\n    \"Bill Depth (mm)\": \"bill_depth_mm\"\n}\n\n# Define custom colors for each species\ncolor_map = {\n    \"Adelie\": \"#1f77b4\",  # Blue\n    \"Chinstrap\": \"#f75c03\",  # Orange\n    \"Gentoo\": \"#801a86\"  # Purple\n}\n\n# Coordinates for the islands\nisland_coordinates = {\n    \"Biscoe Island\": (-65.0, -64.0),\n    \"Dream Island\": (-64.0, -62.0),\n    \"Torgersen Island\": (-64.0, -63.0)\n}\n\n# Extract the display names and use them as choices\ndisplay_names = list(column_choices.keys())\n\napp_ui = ui.page_fluid(\n    ui.tags.head(\n        ui.tags.style(\"\"\" \n            .title-box {\n                background-color: #f49e4c; /* Title box color */\n                border: 1px solid #ccc;\n                padding: 10px;\n                text-align: center;\n                font-family: 'Arial', sans-serif;\n                font-size: 15px;\n                color: #111111;\n                margin-bottom: 5px;\n                border-radius: 12px;\n            }\n            .sidebar-custom {\n                background-color: #8ecae6; /* Sidebar background color */\n                padding: 35px;\n                border-radius: 12px;\n                border: 1px solid #edf6f9;\n            }\n            .custom-border-card {\n                border: 12px solid #8ecae6; /* Border color for outer cards */\n                border-radius: 12px;\n                padding: 0; /* No padding in the card to avoid gap */\n                margin-bottom: 10px;\n            }\n            .card-header {\n                margin: -3px 0 0 0;\n                padding: 10px; /* Maintain your padding */\n                background-color: #8ecae6; /* Header background color */\n                color: #14213d; /* Header text color */\n                border-top: 3px solid #8ecae6; /* Header top border color */\n                border-bottom: 3px solid #8ecae6; /* Header bottom border color */\n            }\n        \"\"\")\n    ),\n    ui.card(\n        ui.layout_sidebar(\n            ui.sidebar(\n                ui.div(\n                    ui.h2(\"Filters and Inputs\"),\n                    ui.hr(style=\"border-top: 4px solid #f75c03;\"),\n\n                    ui.h4(\n                        \"Filter Data by Year or Select All Years with the Checkbox:\",\n                    ),\n                    ui.div(\n                        ui.input_checkbox_group(\n                            \"selected_species_mc\", \n                            \"Select Species to Filter Data:\", \n                            choices=[\"Adelie\", \"Chinstrap\", \"Gentoo\"], \n                            selected=[\"Adelie\", \"Chinstrap\", \"Gentoo\"]\n                        ),\n                        style=\"background-color: transparent; margin-top: 15; margin-bottom: 10px;\"\n                    ),\n                    ui.div(\n                        ui.input_checkbox_group(\n                            \"sex_filter\", \n                            \"Select Sex to Filter Data:\", \n                            choices=[\"male\", \"female\"], \n                            selected=[\"male\", \"female\"],\n                        ),\n                        style=\"background-color: transparent; margin-top: 15; margin-bottom: 2px;\"\n                    ),\n                    \n                    ui.div(\n                        ui.input_slider(\"year_slider\", \"Select Year:\", 2007, 2009, 2007),\n                        style=\"background-color: transparent;\"\n                    ),\n                    ui.div(\n                        ui.input_checkbox(\"all_years\", \"Check to Show data from All Years\", True),\n                        style=\"background-color: transparent; margin-top: 15; margin-bottom: 10px;\"\n                    ),\n                    ui.hr(style=\"border-top: 4px solid #f75c03;\"),\n                    \n                    #Seaborn Sidebar\n                    ui.h4(\"Seaborn Histogram Inputs\"),\n                    ui.input_slider(\"n\", \"Seaborn Bin Count\", 1, 50, 25),\n                    ui.input_selectize(\n                        \"selected_attribute\",  # Name of the input\n                        \"Select a column for X-axis:\",  # Label for the input\n                        choices=display_names,  # Use display names in dropdown\n                        selected=\"Body Mass (g)\"  # Default selection\n                    ),\n                    ui.input_checkbox(\n                        \"show_all\",\n                        \"Show Selected Species without Overlay\"\n                    ),\n                    \n                    ui.hr(style=\"border-top: 4px solid #f75c03;\"),\n                            \n                    #Plotly Sidebar\n                    ui.h4(\"Plotly Histogram Inputs\"),  # Heading 2 for the histogram card title\n                    ui.input_numeric(\"numeric\", \"Number of bins\", 20, min=1, max=100),\n                    ui.input_selectize(\n                        \"x_column\", \n                        \"Select a column for X-axis:\", \n                        choices=display_names,  # Display names in dropdown\n                        selected=\"Body Mass (g)\"\n                    ),  \n                    ui.input_checkbox(\n                        \"show_all_PlotlyH\",\n                        \"Show Selected Species without Overlay\"\n                    ),\n                    ui.input_checkbox(\n                        \"single_color\",\n                        \"Display Selected Species in a Single Color\"\n                    ),\n                    \n                    ui.hr(style=\"border-top: 4px solid #f75c03;\"),\n\n\n                    ui.h4(\"Plotly Scatter Plot Inputs\"),  # Heading 2 for the scatter plot card title\n                    ui.input_selectize(\n                        \"x_column_scatter\", \n                        \"Select a column for X-axis:\", \n                        choices=display_names,  # Display names in dropdown\n                        selected=\"Body Mass (g)\"\n                    ),\n                    ui.input_selectize(\n                        \"y_column_scatter\", \n                        \"Select a column for Y-axis:\", \n                        choices=display_names,  # Display names in dropdown\n                        selected=\"Flipper Length (mm)\"\n                    ),\n                    ui.hr(style=\"border-top: 4px solid #f75c03;\"),\n                    ui.a(\"GitHub\", href=\"https://github.com/dennykami1/cintel-03-reactive\", target=\"_blank\"),\n                    class_=\"sidebar-custom\"  # Apply custom sidebar class              \n                ),\n            ),\n            ui.div(\n                ui.h2(\"Exploring a Interactive and Reactive Application featuring Palmer Penguins Data\"),\n                class_=\"title-box\"\n            ),\n            ui.page_fillable(\n                ui.card(\n                    ui.card_header(\"Interactive Histograms in PyShiny with Seaborn and Plotly\", style=\"background-color: #8ecae6; color: #14213d;\"),\n                    ui.layout_columns(\n                        ui.card(\n                            ui.h3(\"Seaborn Histogram\"),\n                            ui.output_plot(\"plot\"),     \n                        ),\n                        ui.card(\n                            ui.h3(\"Plotly Histogram\"),\n                            output_widget(\"penguins_histogram\"),  # Output widget for histogram\n                            full_screen=True  # Make inner card full-screen width\n                        )\n                    ),\n                    class_=\"custom-border-card\"  # Apply custom border class to this card only\n                ),\n                full_screen=True  # Make inner card full-screen width\n            ),\n            ui.card(\n                ui.card_header(\"Scatter Plot using Plotly & Interactive Map using ipyleaflet\", style=\"background-color: #8ecae6; color: #14213d;\"),\n                ui.layout_columns(\n                    ui.card(\n                        ui.h3(\"Plotly Scatter Plot\"),\n                        output_widget(\"penguins_scatter_plot\"),\n                    ),\n                    ui.card(\n                        ui.input_select(\"center\", \"Select Island\", choices=list(island_coordinates.keys())),\n                        output_widget(\"map\"),             \n                        full_screen=True,  # Make inner card full-screen width\n                    )\n                ),     \n                class_=\"custom-border-card\"  # Apply custom border class to this card only\n            ), \n            ui.card(\n                ui.card_header(\"Palmer Penguins Data Frame & Data Grid\", style=\"background-color: #8ecae6; color: #14213d;\"),\n                ui.layout_columns(\n                    ui.card(\n                        ui.column(\n                            11,\n                            ui.h2(\"Data Frame\"),\n                            ui.output_data_frame(\"penguins_df\")\n                        )\n                    ),\n                    ui.card(\n                        ui.column(\n                            11,\n                            ui.h2(\"Data Table\"),\n                            ui.output_data_frame(\"penguins_dt\")\n                        )\n                    )\n                ),\n                class_=\"custom-border-card\",  # Apply custom border class to this card only\n                full_screen=True  # Outer card full-screen width\n            ),\n            ui.div(\n                ui.h4(\"Author: Kami Denny\"),\n                class_=\"title-box\"\n            ),\n        ),\n        full_screen=True,  # Outer card full-screen width\n        style=\"padding: 20px;\"\n    ),\n    theme=shinyswatch.theme.lumen\n)\n\ndef server(input, output, session):\n\n    # Create the map widget globally so it can be accessed in reactive updates\n    imagery_map = ipyl.Map(zoom=10, center=(-64.5, -63.0))\n    \n    # Add satellite imagery layer\n    imagery_layer = ipyl.TileLayer(\n        url='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n        attribution='&copy; <a href=\"https://www.esri.com/\">ESRI</a>',\n        name='Satellite Imagery'\n    )\n    imagery_map.add_layer(imagery_layer)\n    \n    # Create a penguin icon\n    penguin_icon_url = \"https://cdn.pixabay.com/photo/2024/03/27/17/35/penguin-8659564_1280.png\"\n    penguin_icon = ipyl.Icon(icon_url=penguin_icon_url, icon_size=(45, 45))\n    \n    # Add markers for each island\n    for island, coords in island_coordinates.items():\n        penguin_marker = ipyl.Marker(location=coords, icon=penguin_icon, draggable=False)\n        imagery_map.add_layer(penguin_marker)\n    \n    # Output the map widget\n    @output\n    @render_widget\n    def map():\n        return imagery_map\n\n    # Reactive effect to update the map center when an island is selected\n    @reactive.Effect\n    def _():\n        selected_island = input.center()\n        if selected_island in island_coordinates:\n            imagery_map.center = island_coordinates[selected_island]\n            imagery_map.zoom = 13  # Adjust zoom level for better visibility\n    \n    @render.plot(alt=\"A Seaborn histogram on penguin data.\")  \n    def plot():\n        selected_display_name = input.selected_attribute()\n        selected_column = column_choices[selected_display_name]\n        selected_species = input.selected_species_mc()\n\n        # Ensure at least one species is selected\n        if not selected_species:\n            raise ValueError(\"Please select at least one species.\")\n\n        # Use the filtered data\n        filtered_penguins = filtered_data()\n\n        # Determine overlay based on checkbox\n        multiple_mode = \"layer\" if not input.show_all() else \"stack\"\n\n        # Plotting with the selected settings\n        if selected_column in filtered_penguins.columns:\n            if pd.api.types.is_numeric_dtype(filtered_penguins[selected_column]):\n                ax = sns.histplot(\n                    data=filtered_penguins, x=selected_column, bins=input.n(),\n                    hue=\"species\" if not input.show_all() else None,\n                    palette=color_map, multiple=multiple_mode, kde=True\n                )\n                ax.set_title(\"Palmer Penguins\")\n                ax.set_xlabel(selected_display_name)\n                ax.set_ylabel(\"Count\")\n            else:\n                ax = sns.histplot(\n                    data=filtered_penguins, x=\"body_mass_g\", bins=input.n(),\n                    hue=\"species\" if not input.show_all() else None,\n                    palette=color_map, multiple=multiple_mode, kde=True\n                )\n                ax.set_title(\"Palmer Penguins\")\n                ax.set_xlabel(\"Body Mass (g)\")\n                ax.set_ylabel(\"Count\")\n                ax.text(0.5, 0.5, 'Selected column is not numeric.',\n                        horizontalalignment='center', verticalalignment='center',\n                        transform=ax.transAxes, fontsize=12, color='purple')\n        else:\n            ax = sns.histplot(\n                data=filtered_penguins, x=\"body_mass_g\", bins=input.n(),\n                hue=\"species\" if not input.show_all() else None,\n                palette=color_map, multiple=multiple_mode, kde=True\n            )\n            ax.set_title(\"Palmer Penguins\")\n            ax.set_xlabel(\"Body Mass (g)\")\n            ax.set_ylabel(\"Count\")\n            ax.text(0.5, 0.5, 'Column not found!',\n                    horizontalalignment='center', verticalalignment='center',\n                    transform=ax.transAxes, fontsize=12, color='purple')\n        \n        return ax\n    \n    @render_widget \n    def penguins_histogram():  \n        # Map the display name back to the actual column name\n        x_column_name = column_choices[input.x_column()]\n\n        # Use the filtered data\n        filtered_penguins = filtered_data()\n\n        # Define color for single color option\n        single_color = \"#636EFA\"  # Default color (you can change this)\n\n        # Check if the user wants to show all species without overlay\n        if input.show_all_PlotlyH():\n            # Create histogram plot without overlay for selected species\n            histogram = px.histogram(\n                data_frame=filtered_penguins,\n                x=x_column_name,  # Dynamic x-axis based on actual column name\n                nbins=input.numeric(),\n                color=\"species\" if not input.single_color() else None,  # Conditional color\n                barmode=\"group\",  # Group the bars side by side\n                color_discrete_map=color_map if not input.single_color() else {\"All\": single_color}  # Use the custom color map or single color\n            ).update_layout(\n                title={\"text\": f\"Penguin {input.x_column()} Distribution by Species\", \"x\": 0.5},\n                yaxis_title=\"Count\",\n                xaxis_title=input.x_column(),\n            )\n        else:\n            # Create histogram plot based on selected x-axis column with species overlay and custom colors\n            histogram = px.histogram(\n                data_frame=filtered_penguins,\n                x=x_column_name,  # Dynamic x-axis based on actual column name\n                nbins=input.numeric(),\n                color=\"species\" if not input.single_color() else None,  # Conditional color\n                barmode=\"overlay\",  # Overlay the bars instead of stacking\n                color_discrete_map=color_map if not input.single_color() else {\"All\": single_color}  # Use the custom color map or single color\n            ).update_layout(\n                title={\"text\": f\"Penguin {input.x_column()} Distribution by Species\", \"x\": 0.5},\n                yaxis_title=\"Count\",\n                xaxis_title=input.x_column(),\n            )\n\n        return histogram \n    \n    @render_widget \n    def penguins_scatter_plot():  \n        # Map the display names back to the actual column names\n        x_column_name = column_choices[input.x_column_scatter()]\n        y_column_name = column_choices[input.y_column_scatter()]\n\n        # Use the filtered data\n        filtered_penguins = filtered_data()\n        \n        # Create scatter plot\n        scatterplot = px.scatter(\n            data_frame=filtered_penguins,\n            x=x_column_name,  # X-axis based on user selection\n            y=y_column_name,  # Y-axis based on user selection\n            color=\"species\",  # Color points by species\n            color_discrete_map=color_map,  # Use the custom color map\n            title=f\"{input.x_column_scatter()} vs {input.y_column_scatter()}\",\n            labels={x_column_name: input.x_column_scatter(), y_column_name: input.y_column_scatter()}  # Custom labels for axes\n        ).update_layout(\n            title={\"text\": f\"{input.x_column_scatter()} vs {input.y_column_scatter()}\", \"x\": 0.5},\n            yaxis_title=input.y_column_scatter(),\n            xaxis_title=input.x_column_scatter(),\n        )\n\n        return scatterplot\n\n    # Observe the \"Show All Years\" checkbox to update the slider dynamically\n    @reactive.Effect\n    def toggle_slider():\n        if input.all_years():\n            # If \"Show All Years\" is checked, lock the slider to a single value\n            ui.update_slider(\"year_slider\", value=2007, min=2007, max=2007, label=\"All Years Selected\")\n            ui.update_checkbox(\"all_years\", label=\"Uncheck to Filter Data by Year using Slider\")\n        else:\n            # Restore the slider's full range if \"Show All Years\" is unchecked\n            ui.update_slider(\"year_slider\", min=2007, max=2009, label=\"Select Year:\")\n            ui.update_checkbox(\"all_years\", label=\"Check to Show data from All Years\")\n    \n\n    @output\n    @render.data_frame\n    def penguins_df():\n        return filtered_data()\n\n    @output\n    @render.data_frame  \n    def penguins_dt():\n        return filtered_data()\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n    @reactive.Calc\n    def filtered_data():\n        # Start by filtering based on selected species\n        filtered = penguins[penguins['species'].isin(input.selected_species_mc())]\n        \n        # Apply sex filter if selected\n        filtered = filtered[filtered['sex'].isin(input.sex_filter())]\n        \n        # Apply year filter if \"Show All Years\" is unchecked\n        if not input.all_years():\n            filtered = filtered[filtered['year'] == int(input.year_slider())]\n        \n        return filtered\n\n\napp = App(app_ui, server, debug=True)\n", "type": "text"}]